CVE: CVE-2014-0483
yaml_instructions: |
  ===YAML Primer===
  This is a dictionary data structure, akin to JSON.
  Everything before a colon is a key, and the values here are usually strings
  For one-line strings, you can just use quotes after the colon
  For multi-line strings, as we do for our instructions, you put a | and then
  indent by two spaces
  For readability, we hard-wrap multi-line strings at 80 characters. This is
  not absolutely required, but appreciated.
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
reported_instructions: |
  What date was the vulnerability reported to the security team? Look at the
  security bulletins and bug reports. It is not necessarily the same day that the
  CVE was created.  Leave blank if no date is given.
  Please enter your date in YYYY-MM-DD format.
reported_date: 2014-08-14
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced_date: 2014-08-14
published_instructions: |
  Is there a published fix or patch date for this vulnerability?
  Please enter your date in YYYY-MM-DD format.
published_date: 2014-08-14
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.
  Rewrite this description IN YOUR OWN WORDS. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.
  Try to still be specific in your description, but remove project-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to this project would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
  Your target audience is people just like you before you took any course in
  security
description: A field is exploiting a relationship between models within models which promotes a form of a pop-up that allows a remote user to take control to change information
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
reviews: []
bugs: []
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- commit: 027bd348642007617518379f8b02546abacaa6e0
  note: |
   1.4
   This commit as well as the one bellow this updated exceptions 
   and even some whole new "try/Catch" statements. to handle the exception. 
   this was even described in a release document that was added in this commit
- commit: 2a446c896e7c814661fb9c4f212b071b2a7fa446
  note: |
   1.5
   Shares a lot of the same code that 1.4 but has a few additional fields moved around much more than 1.4
- commit: f7c494f2506250b8cb5923714360a3642ed63e0f
  note: |
   1.6
   A lot different from the previous two as the exceptions handed when you first look thing changed.
   They even have an options.py folder that checks
   There are official classes dedicated to invalid field inputs called "DisallowedModelAdminToField"
   that gets the related models to verify the relationship through different try catch blocks. Even in the main they have
   additional steps to verify the relationships
- commit: 2b31342cdf14fc20e07c43d258f1e7334ad664a6
  note: |
   1.7
   Similar to 1.6 although they remove a few ways where they set the "to_field" equal to a post in 1.7 but no mention of it in 1.6.
   They even add a whole new test to the admin_views to verify whether or not admins have control of things that are controlled or not.
vccs:
- commit: 732198ed5c2a127249970e0cd4218d093a38e9a2
  note: This VCC was discovered automatically via archeogit.
- commit: 18d2f4a81611fa4051ccdcfb9dd443f3a247102e
  note: This VCC was discovered automatically via archeogit.
- commit: a19ed8aea395e8e07164ff7d85bd7dff2f24edca
  note: This VCC was discovered automatically via archeogit.
- commit: a89b15628429da79dd47c04bd191de566ef7eee6
  note: This VCC was discovered automatically via archeogit.
- commit: 439cb4047fb583d08149f28e2ce66a8edfe0efa7
  note: This VCC was discovered automatically via archeogit.
- commit: 1c56af676d02aa0cdb70bb3749971f1cac4afdb3
  note: This VCC was discovered automatically via archeogit.
- commit: b5f0aff922fe963a4df0d3449d8fe55a6acd950d
  note: This VCC was discovered automatically via archeogit.
- commit: 2c2209b473aeec85d16ac24469383cf0e214273b
  note: This VCC was discovered automatically via archeogit.
- commit: 5bc0ec4ec4b7c888a291bc81b2edd72812231d96
  note: This VCC was discovered automatically via archeogit.
- commit: d636150e533a2954f9b74aa6ca2e7375b18437ef
  note: This VCC was discovered automatically via archeogit.
- commit: d362c1546f8ad62811e5dee3cf0b43170e6e1c4c
  note: This VCC was discovered automatically via archeogit.
- commit: ae7d9bfad2c92ebe30ce8ca0a145eba4504312f1
  note: This VCC was discovered automatically via archeogit.
- commit: 0e5faf225c5cd1acf2ab653c74f5b161470403b9
  note: This VCC was discovered automatically via archeogit.
- commit: d228c1192ed59ab0114d9eba82ac99df611652d2
  note: This VCC was discovered automatically via archeogit.
- commit: 3c51962cabc9537221b86c667aac5ffaa1469660
  note: This VCC was discovered automatically via archeogit.
- commit: bd3b5e8c2b36633134ab63e5a6af7b5f5839a7c4
  note: This VCC was discovered automatically via archeogit.
- commit: 6acaa5238668593d6d854b28dbfa65e95796585c
  note: This VCC was discovered automatically via archeogit.
- commit: d818e0c9b2b88276cc499974f9eee893170bf0a8
  note: This VCC was discovered automatically via archeogit.
- commit: c4db7f075e269411287ff14b5518412250ba455f
  note: This VCC was discovered automatically via archeogit.
- commit: 4ad1eb1c14b629cf5bcfd253ed40e875f1bddd47
  note: This VCC was discovered automatically via archeogit.
- commit: 75d2da797e100442d3573dfa7ae490972cea32d8
  note: This VCC was discovered automatically via archeogit.
- commit: 390001ce52802a7fa1fceeabfb646e6b32911fb9
  note: This VCC was discovered automatically via archeogit.
- commit: b921f1bac090cecd87e0b99b4c7c2d7581bcf2da
  note: This VCC was discovered automatically via archeogit.
- commit: 8e670a0e503ae11941bb6ba0e70e0e579286d362
  note: This VCC was discovered automatically via archeogit.
- commit: be38c5bcc8b6d641d210cbcf0508605223366778
  note: This VCC was discovered automatically via archeogit.
- commit: 5268d71f18d12c362d74010210309c1cec8e8a1a
  note: This VCC was discovered automatically via archeogit.
- commit: f51eab796d087439eedcb768cdd312517780940e
  note: This VCC was discovered automatically via archeogit.
upvotes_instructions: |
  For the first round, ignore this upvotes number.
  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes:
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?
    For code: and fix: - your answer should be boolean.
    For the code_answer below, look not only at the fix but the surrounding
    code near the fix in related directories and determine if and was there were unit tests involved for this subsystem. The code
    For the fix_answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  code:
  code_answer:
  fix:
  fix_answer:
discovered:
  question: |
    How was this vulnerability discovered?
    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.
    The automated, contest, and developer flags can be true, false, or nil.
    If there is no evidence as to how this vulnerability was found, then please explain where you looked.
  answer:
  automated:
  contest:
  developer:
autodiscoverable:
  instructions: |
    Is it plausible that a fully automated tool could have discovered
    this? These are tools that require little knowledge of the domain,
     e.g. automatic static analysis, compiler warnings, fuzzers.
    Examples for true answers: SQL injection, XSS, buffer overflow
    Examples for false: RFC violations, permissions issues, anything
    that requires the tool to be "aware" of the project's
    domain-specific requirements.
    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note:
  answer:
specification:
  instructions: |
    Is there mention of a violation of a specification? For example,
    an RFC specification, a protocol specification, or a requirements
    specification.
    Be sure to check all artifacts for this: bug report, security
    advisory, commit message, etc.
    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note:
  answer:
subsystem:
  question: |
    What subsystems was the mistake in?
    Most systems don't have a formal list of their subsystems, but you can
    usually infer them from path names, bug report tags, or other key words
    used. A single source file is not what we mean by a subsystem. In Django,
    the "Component" field on the bug report is useful. But there may be other
    subsystems involved.
    Your subsystem name(s) should not have any dots or slashes in them. Only
    alphanumerics, whitespace, _, - and @.Feel free to add multiple using a YAML
    array.
    In the answer field, explain where you saw these words.
    In the name field, a subsystem name (or an array of names)
    e.g. clipboard, model, view, controller, mod_dav, ui, authentication
  answer:
  name:
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?
    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit:
    note:
  - commit:
    note:
i18n:
  question: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)? An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.
    Answer should be boolean. Write a note about how you came to the conclusions
    you did.
  answer:
  note:
ipc:
  question: |
    Did the feature that this vulnerability affected use inter-process
    communication? IPC includes OS signals, pipes, stdin/stdout, message
    passing, and clipboard. Writing to files that another program in this
    software system reads is another form of IPC.
    Answer should be boolean.
  answer:
  note:
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?
    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.
    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.
    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies:
    note:
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?
    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?
    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer:
CWE_instructions: |
  Please go to http://cwe.mitre.org and find the most specific, appropriate CWE
  entry that describes your vulnerability. We recommend going to
  https://cwe.mitre.org/data/definitions/699.html for the Software Development
  view of the vulnerabilities. We also recommend the tool
  http://www.cwevis.org/viz to help see how the classifications work.
  If you have anything to note about why you classified it this way, write
  something in CWE_note. This field is optional.
  Just the number here is fine. No need for name or CWE prefix. If more than one
  apply here, then choose the best one and mention the others in CWE_note.
CWE:
CWE_note:
nickname_instructions: |
  A catchy name for this vulnerability that would draw attention it. If the
  report mentions a nickname, use that. Must be under 30 characters.
  Optional.
nickname: Odd one out
