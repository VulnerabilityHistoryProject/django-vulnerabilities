CVE: CVE-2019-19118
yaml_instructions: |
  ===YAML Primer===
  This is a dictionary data structure, akin to JSON.
  Everything before a colon is a key, and the values here are usually strings
  For one-line strings, you can just use quotes after the colon
  For multi-line strings, as we do for our instructions, you put a | and then
  indent by two spaces

  For readability, we hard-wrap multi-line strings at 80 characters. This is
  not absolutely required, but appreciated.
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: false
reported_instructions: |
  What date was the vulnerability reported to the security team? Look at the
  security bulletins and bug reports. It is not necessarily the same day that the
  CVE was created.  Leave blank if no date is given.
  Please enter your date in YYYY-MM-DD format.
reported_date:
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced_date:
published_instructions: |
  Is there a published fix or patch date for this vulnerability?
  Please enter your date in YYYY-MM-DD format.
published_date:
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description IN YOUR OWN WORDS. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove project-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to this project would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.

  Your target audience is people just like you before you took any course in
  security
description:
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
reviews: []
bugs: []
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- commit: '092cd66cf3c3e175acce698d6ca2012068d878fa'
  note:
- commit: 36f580a17f0b3cb087deadf3b65eea024f479c21
  note:
- commit: 103ebe2b5ff1b2614b85a52c239f471904d26244
  note:
vccs:
- commit: 390001ce52802a7fa1fceeabfb646e6b32911fb9
  note: This VCC was discovered automatically via archeogit.
- commit: df8d8d4292684d6ffa7474f1e201aed486f02b53
  note: This VCC was discovered automatically via archeogit.
- commit: 73de9dd1fa4e226e8955dfb36408b9c4fc292cb2
  note: This VCC was discovered automatically via archeogit.
- commit: a19ed8aea395e8e07164ff7d85bd7dff2f24edca
  note: This VCC was discovered automatically via archeogit.
- commit: b1b1da1eac93297503c04b8394fb98e38f552f5f
  note: This VCC was discovered automatically via archeogit.
- commit: 4754f122dd9b41fc9b2dee3fa74e19fc384237ab
  note: This VCC was discovered automatically via archeogit.
- commit: 64e1a271f50d921a54388539b6ff7102a31c3d29
  note: This VCC was discovered automatically via archeogit.
- commit: 0ed7d155635da9f79d4dd67e4889087d3673c6da
  note: This VCC was discovered automatically via archeogit.
- commit: 2f02a05ffb45be68b4164b4785ff1826833150a3
  note: This VCC was discovered automatically via archeogit.
- commit: a65eed39425581b206f934dd6eed960af8a64f3e
  note: This VCC was discovered automatically via archeogit.
- commit: 015fad9060a8a6fb273a33b8e8457e504ed26131
  note: This VCC was discovered automatically via archeogit.
- commit: 82f7bee1d56e1bf8ae041c6cdeb7374ea6b844de
  note: This VCC was discovered automatically via archeogit.
- commit: 321e94fa41b121f65c02119c02098df327bbd569
  note: This VCC was discovered automatically via archeogit.
- commit: e508bfd27f34fc753ae32cc1776251e2d7f36610
  note: This VCC was discovered automatically via archeogit.
- commit: 62f3acc70a43a3c4f4970839d490ac8ea6c79047
  note: This VCC was discovered automatically via archeogit.
- commit: 5bc0ec4ec4b7c888a291bc81b2edd72812231d96
  note: This VCC was discovered automatically via archeogit.
- commit: 9e637d3061bfd620be3e2bb6a79e2d8d08154f91
  note: This VCC was discovered automatically via archeogit.
- commit: 2c2871b7c3e99fe651796bb8c12fc3e12d83a34a
  note: This VCC was discovered automatically via archeogit.
- commit: 825f0beda804e48e9197fcf3b0d909f9f548aa47
  note: This VCC was discovered automatically via archeogit.
- commit: 32e6a7d3a57b2287d55e8b8efa4e8cb7643b1720
  note: This VCC was discovered automatically via archeogit.
- commit: 043bd709425149b8eff3fb821cba5c23aaebd0df
  note: This VCC was discovered automatically via archeogit.
- commit: 0a9b5d7adee86def16972debf6441deb96135ce2
  note: This VCC was discovered automatically via archeogit.
- commit: 7a61c68c50d3837c50e35c252fd76220f08b5290
  note: This VCC was discovered automatically via archeogit.
- commit: c2e70f02653519db3a49cd48f5158ccad7434d25
  note: This VCC was discovered automatically via archeogit.
- commit: d7615674d98a067ed06bdf1924dc76223262938a
  note: This VCC was discovered automatically via archeogit.
- commit: 1e82094f1b6690018228e688303295f83e1c3d9a
  note: This VCC was discovered automatically via archeogit.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes:
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For code: and fix: - your answer should be boolean.

    For the code_answer below, look not only at the fix but the surrounding
    code near the fix in related directories and determine if and was there were unit tests involved for this subsystem. The code

    For the fix_answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  code:
  code_answer:
  fix:
  fix_answer:
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The automated, contest, and developer flags can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then please explain where you looked.
  answer:
  automated:
  contest:
  developer:
autodiscoverable:
  instructions: |
    Is it plausible that a fully automated tool could have discovered
    this? These are tools that require little knowledge of the domain,
     e.g. automatic static analysis, compiler warnings, fuzzers.

    Examples for true answers: SQL injection, XSS, buffer overflow

    Examples for false: RFC violations, permissions issues, anything
    that requires the tool to be "aware" of the project's
    domain-specific requirements.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note:
  answer:
specification:
  instructions: |
    Is there mention of a violation of a specification? For example,
    an RFC specification, a protocol specification, or a requirements
    specification.

    Be sure to check all artifacts for this: bug report, security
    advisory, commit message, etc.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note:
  answer:
subsystem:
  question: |
    What subsystems was the mistake in?

    Most systems don't have a formal list of their subsystems, but you can
    usually infer them from path names, bug report tags, or other key words
    used. A single source file is not what we mean by a subsystem. In Django,
    the "Component" field on the bug report is useful. But there may be other
    subsystems involved.

    Your subsystem name(s) should not have any dots or slashes in them. Only
    alphanumerics, whitespace, _, - and @.Feel free to add multiple using a YAML
    array.

    In the answer field, explain where you saw these words.
    In the name field, a subsystem name (or an array of names)

    e.g. clipboard, model, view, controller, mod_dav, ui, authentication
  answer:
  name:
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit:
    note:
  - commit:
    note:
i18n:
  question: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)? An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be boolean. Write a note about how you came to the conclusions
    you did.
  answer:
  note:
ipc:
  question: |
    Did the feature that this vulnerability affected use inter-process
    communication? IPC includes OS signals, pipes, stdin/stdout, message
    passing, and clipboard. Writing to files that another program in this
    software system reads is another form of IPC.

    Answer should be boolean.
  answer:
  note:
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies:
    note:
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer:
CWE_instructions: |
  Please go to http://cwe.mitre.org and find the most specific, appropriate CWE
  entry that describes your vulnerability. We recommend going to
  https://cwe.mitre.org/data/definitions/699.html for the Software Development
  view of the vulnerabilities. We also recommend the tool
  http://www.cwevis.org/viz to help see how the classifications work.

  If you have anything to note about why you classified it this way, write
  something in CWE_note. This field is optional.

  Just the number here is fine. No need for name or CWE prefix. If more than one
  apply here, then choose the best one and mention the others in CWE_note.
CWE: [276]
CWE_note:
nickname_instructions: |
  A catchy name for this vulnerability that would draw attention it. If the
  report mentions a nickname, use that. Must be under 30 characters.
  Optional.
nickname:
